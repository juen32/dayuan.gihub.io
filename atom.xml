<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dayuan&#39;s Blog.</title>
  <icon>https://www.gravatar.com/avatar/3d1cc57259894f6354e5f08166018e20</icon>
  <subtitle>it&#39;s better to burn out than to fade away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dayuan.tech/"/>
  <updated>2018-08-22T06:56:31.941Z</updated>
  <id>https://dayuan.tech/</id>
  
  <author>
    <name>lindayuan</name>
    <email>youyuan_lin@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Create-React-App添加css Modules、sasss和antd</title>
    <link href="https://dayuan.tech/article/%E4%BD%BF%E7%94%A8create-react-app%E6%B7%BB%E5%8A%A0css%20modules%E3%80%81sasss%E5%92%8Cantd/"/>
    <id>https://dayuan.tech/article/使用create-react-app添加css modules、sasss和antd/</id>
    <published>2018-08-20T17:03:59.000Z</published>
    <updated>2018-08-22T06:56:31.941Z</updated>
    
    <content type="html"><![CDATA[<h1>前言</h1><p><code>create-react-app</code>是facebook的官方脚手架，对于个人开发者和中小型公司快速创建项目非常推荐。react的CSS解决方案有很多，这里我技术选型时用<code>css modules</code>和<code>sass</code>，然后配合antd使用通用组件库。但是create-react-app原生并不支持<code>css modules</code>和<code>sass</code>，所以需要额外配置。</p><h1>配置</h1><h2>增加css modules和sass</h2><h3>使用eject暴露配置</h3><p><code>create-react-app</code>默认是没有暴露<code>webpack</code>配置的，所以需要eject一下。注意如果项目在git仓库环境下，先提交代码到git仓库，否则会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run eject</span><br></pre></td></tr></table></figure><h3>npm添加css modules和sass</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install react-css-modules </span><br><span class="line">npm install sass-loader node-sass</span><br></pre></td></tr></table></figure><p>这里安装sass可能会遇到墙的问题报错，所以要么使用cnpm或者使用本地代理设置，因为我有ss所以使用本地代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启代理</span></span><br><span class="line">npm config set proxy http:<span class="comment">//127.0.0.1:1080</span></span><br><span class="line"><span class="comment">// 安装完sass后关闭代理</span></span><br><span class="line">npm config <span class="keyword">delete</span> proxy</span><br></pre></td></tr></table></figure><h3>webpack配置</h3><p>重点来了，我们需要给<code>webpack</code>配置上<code>css-modules</code>和<code>sass-loader</code>。但是使用<code>css-modules</code>会使<code>node_modules</code>库里的css样式找不到，比如后面要使用到的antd，这个时候我们需要inclube来排除影响<code>node_modules</code>，使得<code>css-modules</code>不会影响到<code>node_modules</code></p><p>修改项目中<code>config</code>目录下的<code>webpack.config.dev.js</code>和<code>webpack.config.prod.js</code>，说明下这两个文件，前一个是开发环境<code>npm start</code>使用，后一个是<code>npm run build</code>打包后使用</p><ul><li>修改<code>webpack.config.dev.js</code>:</li></ul><p>大约在160行左右，找到<code>test: /\.css$/</code>，中文注释的地方就是修改和增加的地方</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: [<span class="regexp">/\.css$/</span>, /\.scss$/],<span class="comment">// 这里增加SCSS的支持</span></span><br><span class="line">  exclude: [<span class="regexp">/node_modules/</span>],<span class="comment">// 这里去排除node_modules，防止css modules影响到node_modules</span></span><br><span class="line">  use: [</span><br><span class="line">    <span class="built_in">require</span>.resolve(<span class="string">'style-loader'</span>),</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'css-loader'</span>),</span><br><span class="line">      options: &#123;</span><br><span class="line">        importLoaders: <span class="number">1</span>,</span><br><span class="line">        modules: <span class="literal">true</span>, <span class="comment">// 这里增加对css modules的支持</span></span><br><span class="line">        localIdentName: <span class="string">'[name]__[local]__[hash:base64:5]'</span> <span class="comment">//这里增加对css modules的支持</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'sass-loader'</span>), <span class="comment">// 这里增加sass的支持</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'postcss-loader'</span>),</span><br><span class="line">      options: &#123;</span><br><span class="line">        <span class="comment">// Necessary for external CSS imports to work</span></span><br><span class="line">        <span class="comment">// https://github.com/facebookincubator/create-react-app/issues/2677</span></span><br><span class="line">        ident: <span class="string">'postcss'</span>,</span><br><span class="line">        plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">'postcss-flexbugs-fixes'</span>),</span><br><span class="line">          autoprefixer(&#123;</span><br><span class="line">            browsers: [</span><br><span class="line">              <span class="string">'&gt;1%'</span>,</span><br><span class="line">              <span class="string">'last 4 versions'</span>,</span><br><span class="line">              <span class="string">'Firefox ESR'</span>,</span><br><span class="line">              <span class="string">'not ie &lt; 9'</span>, <span class="comment">// React doesn't support IE8 anyway</span></span><br><span class="line">            ],</span><br><span class="line">            flexbox: <span class="string">'no-2009'</span>,</span><br><span class="line">          &#125;),</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 因为上面排除了css_modules所以这里一定要再添加个排除src来识别css_modules</span></span><br><span class="line"><span class="comment">// 其实就是复制之前没修改前的所有，再增加一个exclude: [/src/]</span></span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.css$/</span>, </span><br><span class="line">  exclude: [<span class="regexp">/src/</span>], <span class="comment">// 这里添加排除src，</span></span><br><span class="line">  use: [</span><br><span class="line">    <span class="built_in">require</span>.resolve(<span class="string">'style-loader'</span>),</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'css-loader'</span>),</span><br><span class="line">      options: &#123;</span><br><span class="line">        importLoaders: <span class="number">1</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'postcss-loader'</span>),</span><br><span class="line">      options: &#123;</span><br><span class="line">        <span class="comment">// Necessary for external CSS imports to work</span></span><br><span class="line">        <span class="comment">// https://github.com/facebookincubator/create-react-app/issues/2677</span></span><br><span class="line">        ident: <span class="string">'postcss'</span>,</span><br><span class="line">        plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">'postcss-flexbugs-fixes'</span>),</span><br><span class="line">          autoprefixer(&#123;</span><br><span class="line">            browsers: [</span><br><span class="line">              <span class="string">'&gt;1%'</span>,</span><br><span class="line">              <span class="string">'last 4 versions'</span>,</span><br><span class="line">              <span class="string">'Firefox ESR'</span>,</span><br><span class="line">              <span class="string">'not ie &lt; 9'</span>, <span class="comment">// React doesn't support IE8 anyway</span></span><br><span class="line">            ],</span><br><span class="line">            flexbox: <span class="string">'no-2009'</span>,</span><br><span class="line">          &#125;),</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改<code>webpack.config.prod.js</code>:</li></ul><p>和上面修改<code>webpack.config.dev.js</code>类似</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: [<span class="regexp">/\.css$/</span>, /\.scss$/], <span class="comment">// 这里增加SCSS的支持</span></span><br><span class="line">    exclude: [<span class="regexp">/node_modules/</span>], <span class="comment">// 这里去排除node_modules</span></span><br><span class="line">    loader: ExtractTextPlugin.extract(</span><br><span class="line">      <span class="built_in">Object</span>.assign(</span><br><span class="line">        &#123;</span><br><span class="line">          fallback: &#123;</span><br><span class="line">            loader: <span class="built_in">require</span>.resolve(<span class="string">'style-loader'</span>),</span><br><span class="line">            options: &#123;</span><br><span class="line">              hmr: <span class="literal">false</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          use: [</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="built_in">require</span>.resolve(<span class="string">'css-loader'</span>),</span><br><span class="line">              options: &#123;</span><br><span class="line">                importLoaders: <span class="number">1</span>,</span><br><span class="line">                minimize: <span class="literal">true</span>,</span><br><span class="line">                sourceMap: <span class="literal">true</span>,</span><br><span class="line">                modules: <span class="literal">true</span>, <span class="comment">// 这里添加css modules支持</span></span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="built_in">require</span>.resolve(<span class="string">'postcss-loader'</span>),</span><br><span class="line">              options: &#123;</span><br><span class="line">                <span class="comment">// Necessary for external CSS imports to work</span></span><br><span class="line">                <span class="comment">// https://github.com/facebookincubator/create-react-app/issues/2677</span></span><br><span class="line">                ident: <span class="string">'postcss'</span>,</span><br><span class="line">                plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">                  <span class="built_in">require</span>(<span class="string">'postcss-flexbugs-fixes'</span>),</span><br><span class="line">                  autoprefixer(&#123;</span><br><span class="line">                    browsers: [</span><br><span class="line">                      <span class="string">'&gt;1%'</span>,</span><br><span class="line">                      <span class="string">'last 4 versions'</span>,</span><br><span class="line">                      <span class="string">'Firefox ESR'</span>,</span><br><span class="line">                      <span class="string">'not ie &lt; 9'</span>, <span class="comment">// React doesn't support IE8 anyway</span></span><br><span class="line">                    ],</span><br><span class="line">                    flexbox: <span class="string">'no-2009'</span>,</span><br><span class="line">                  &#125;),</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="built_in">require</span>.resolve(<span class="string">'sass-loader'</span>), <span class="comment">// 这里添加sass支持</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        extractTextPluginOptions</span><br><span class="line">      )</span><br><span class="line">    ),</span><br><span class="line">    <span class="comment">// Note: this won't work without `new ExtractTextPlugin()` in `plugins`.</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">    exclude: [<span class="regexp">/src/</span>], <span class="comment">// 排除src</span></span><br><span class="line">    loader: ExtractTextPlugin.extract(</span><br><span class="line">      <span class="built_in">Object</span>.assign(</span><br><span class="line">        &#123;</span><br><span class="line">          fallback: &#123;</span><br><span class="line">            loader: <span class="built_in">require</span>.resolve(<span class="string">'style-loader'</span>),</span><br><span class="line">            options: &#123;</span><br><span class="line">              hmr: <span class="literal">false</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          use: [</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="built_in">require</span>.resolve(<span class="string">'css-loader'</span>),</span><br><span class="line">              options: &#123;</span><br><span class="line">                importLoaders: <span class="number">1</span>,</span><br><span class="line">                minimize: <span class="literal">true</span>,</span><br><span class="line">                sourceMap: <span class="literal">true</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="built_in">require</span>.resolve(<span class="string">'postcss-loader'</span>),</span><br><span class="line">              options: &#123;</span><br><span class="line">                <span class="comment">// Necessary for external CSS imports to work</span></span><br><span class="line">                <span class="comment">// https://github.com/facebookincubator/create-react-app/issues/2677</span></span><br><span class="line">                ident: <span class="string">'postcss'</span>,</span><br><span class="line">                plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">                  <span class="built_in">require</span>(<span class="string">'postcss-flexbugs-fixes'</span>),</span><br><span class="line">                  autoprefixer(&#123;</span><br><span class="line">                    browsers: [</span><br><span class="line">                      <span class="string">'&gt;1%'</span>,</span><br><span class="line">                      <span class="string">'last 4 versions'</span>,</span><br><span class="line">                      <span class="string">'Firefox ESR'</span>,</span><br><span class="line">                      <span class="string">'not ie &lt; 9'</span>, <span class="comment">// React doesn't support IE8 anyway</span></span><br><span class="line">                    ],</span><br><span class="line">                    flexbox: <span class="string">'no-2009'</span>,</span><br><span class="line">                  &#125;),</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        extractTextPluginOptions</span><br><span class="line">      )</span><br><span class="line">    ),</span><br><span class="line">    <span class="comment">// Note: this won't work without `new ExtractTextPlugin()` in `plugins`.</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3>安装antd和配置</h3><p>主要是安装配置<code>antd</code>和<code>babel-plugin-import</code>，这样可以使得<code>antd</code>按需加载样式</p><h4>npm添加antd和babel-plugin-import</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install antd</span><br><span class="line">npm install babel-plugin-<span class="keyword">import</span></span><br></pre></td></tr></table></figure><h4>配置babel</h4><p>在项目根目录下增加<code>.babelrc</code>文件，然后配置如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    <span class="string">"react-app"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    <span class="string">"transform-runtime"</span>,</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"import"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"libraryName"</span>: <span class="string">"antd"</span>,</span><br><span class="line">        <span class="string">"style"</span>: <span class="string">"css"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大功告成</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;create-react-app&lt;/code&gt;是facebook的官方脚手架，对于个人开发者和中小型公司快速创建项目非常推荐。react的CSS解决方案有很多，这里我技术选型时用&lt;code&gt;css modules&lt;/code&gt;和&lt;code
      
    
    </summary>
    
    
      <category term="React" scheme="https://dayuan.tech/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Http请求</title>
    <link href="https://dayuan.tech/article/http%E8%AF%B7%E6%B1%82/"/>
    <id>https://dayuan.tech/article/http请求/</id>
    <published>2018-04-29T06:13:56.000Z</published>
    <updated>2018-08-22T06:41:00.405Z</updated>
    
    <content type="html"><![CDATA[<h1>Http请求的全过程</h1><h2>首先要了解HTTP请求头和相应头</h2><h3>HTTP请求request</h3><p>请求行 请求头 空行 请求数据</p><h4>请求行</h4><p>包括请求类型，GET,POST,PUT,DELETE等，请求访问的资源，最后一部分说明使用的版本比如HTTP1.1</p><h4>请求头部</h4><p>请求头一般有以下部分组成</p><ul><li>Accept 请求接受类型，比如text/javascript</li><li>Accept-Encoding 压缩格式，比如gzip</li><li>Accept-language 语言，比如zh-CN</li><li>Accept-Charset 接受内容的字符集，utf-8</li><li>Cookie 用来保存一个登陆的用户信息，比如SeesionId 一些用户数据</li><li>Host 请求的主机域名</li><li>Referer 表示请求是从哪个URL来的</li><li>Cache-Control 控制是否需要缓存</li><li>User-Agent 用户代理，操作系统版本，浏览器及版本等</li><li>Connection: keep-alive 长连接HTTP1.1默认自带</li></ul><p>websocket 连接 ws/wss</p><ul><li>Connection: Upgrade</li><li>Upgrade: websocket</li></ul><h4>请求内容</h4><p>get请求这里为空，post这里存放请求数据</p><h3>HTTP响应response</h3><p>HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。</p><h4>状态行</h4><p>HTTP/1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为（ok）</p><h4>消息报头</h4><ul><li>Date 相应时间</li><li>Cache-control 缓存控制，max-age 相对过期时间</li><li>Content-Type 内容类型，比如text/html;charset=utf-8</li><li>Expires 过期时间</li><li>Etag 请求变量实体值</li><li>last-Modified 最后修改时间</li></ul><h2>请求过程详解</h2><ol><li>浏览器会先查询<code>Cache-Conrol</code>或者<code>Expires</code>，来查内容是否过期，如果未过期直接从缓存读取，不发送HTTP请求。否则进入下一步</li><li>进行域名解析，然后解析出端口号，默认80 ，浏览器建立一条与服务器的tcp连接（三次握手）</li><li>浏览器判断上次文件返回头中是否含有<code>Etag</code>信息，有则带上<code>if-None-Match</code>字段信息发送请求给服务端，服务端判断Etag未修改返回304，如果修改就返回200，否则进入下一步</li><li>浏览器判断上次文件返回头中是否含有<code>Last-Modified</code>，有则带上<code>if-Modified-Since</code>字段信息发送请求，服务端判断是否失效，有返回200，有效则返回304</li></ol><h2>服务端返回状态码</h2><ul><li><p>100：继续。客户端应继续其请求</p></li><li><p>101：切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议。websocket等</p></li><li><p>200：OK，请求成功</p></li><li><p>201：已创建。成功请求并创建了新的资源</p></li><li><p>202：已接受。已经接受请求，但未处理完成</p></li><li><p>300：重定向，多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</p></li><li><p>301：永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</p></li><li><p>302：临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</p></li><li><p>303：查看其它地址。与301类似。使用GET和POST请求查看</p></li><li><p>304：未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</p></li><li><p>400：客户端请求的语法错误，服务器无法理解</p></li><li><p>401：请求要求用户的身份认证</p></li><li><p>403：服务器理解请求客户端的请求，但是拒绝执行此请求</p></li><li><p>404：服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置&quot;您所请求的资源无法找到&quot;的个性页面</p></li><li><p>406：请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。</p></li><li><p>500：服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器的程序码出错时出现。</p></li><li><p>501：服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Http请求的全过程&lt;/h1&gt;
&lt;h2&gt;首先要了解HTTP请求头和相应头&lt;/h2&gt;
&lt;h3&gt;HTTP请求request&lt;/h3&gt;
&lt;p&gt;请求行 请求头 空行 请求数据&lt;/p&gt;
&lt;h4&gt;请求行&lt;/h4&gt;
&lt;p&gt;包括请求类型，GET,POST,PUT,DELETE等，请求访问
      
    
    </summary>
    
    
      <category term="http" scheme="https://dayuan.tech/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>性能优化</title>
    <link href="https://dayuan.tech/article/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://dayuan.tech/article/性能优化/</id>
    <published>2018-04-25T12:48:00.000Z</published>
    <updated>2018-08-23T05:15:44.695Z</updated>
    
    <content type="html"><![CDATA[<h1>Web前端性能优化</h1><h2>桌面端优化</h2><h3>减少HTTP资源请求数</h3><p>透过构建工具合并雪碧图、CSS、JS文件。来减少资源的请求，避免重复的资源。</p><h3>减少HTTP请求大小</h3><p>除了减少资源次数，也要尽量减小每个HTTP请求的大小。使用gzip压缩传输内容。</p><h3>将CSS或JavaScript放到外部文件中，避免使用style或script标签直接引入</h3><p>在HTML文件中应用外部资源可以有效的利用浏览器的静态资源缓存</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//cdn.domain.com/path/main.css"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.domain.com/path/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3>为HTML制定Cache-Control或Expires</h3><p>为HTML内容设置Cache-Control或者Expires可以将HTML内容缓存起来,在页面的Cache-Control或Expires头部有效的时候，浏览器直接从缓存中读取内容。</p><h3>设置Etag和Last-Modified</h3><p>合理设置Etag和last-Modified使用浏览器缓存，对于未修改的文件，静态资源服务器会向浏览器返回304，让浏览器从缓存中读取文件。</p><h3>减少页面重定向</h3><p>页面每次重定向都会延迟页面内容返回等待时间，一次重定向大约需要600ms的时间开销，为了保证用户尽快看到页面内容，要竟然避免重定向</p><h3>使用静态资源分域存放增加下载并行数</h3><p>浏览器在同一时刻向同一个域名请求文件的并行下载数是有限的，因此可以利用多个域名的主机来存放不同的静态资源，增大页面的加载时资源的并行下载数，缩短页面资源加载的时间。通常根据多个域名来分别存储javaScirpt、CSS和图片文件。</p><h3>使用静态资源CDN来存储文件</h3><p>如果条件允许，可以利用CDN网络加快同一个地理区域内重复静态资源文件的响应下载速度，缩短资源请求时间。</p><h3>使用CDN Combo 下载传输内容</h3><p>CDN Combo是在CDN服务器端将多个文件请求打包成个一个文件的形式来返回的技术，这样可以实现HTTP连接传输的一次性复用，减少浏览器的HTTP请求速，加快资源下载的速度。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.domain.com/path/a.js,b.js,c.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3>使用可缓存的AJAX</h3><p>对于返回内容相同的请求，没必要每次都直接从服务端拉取，合理使用AJAX缓存能加快AJAX响应速度并减轻服务器的压力。</p><h3>使用GET来完成AJAX请求</h3><p>使用XMLHttpRequest时，浏览器中的POST方法请求首先发送头文件，再发送HTTP正文数据。而使用GET的时只发送头部，所以在拉取服务端数据的时使用Get请求效率更高。</p><h3>减少Cookie的大小并进行Cookie隔离</h3><p>HTTP请求通常默认带上浏览器端的Cookie一起发送给服务端，所以在非必要的情况下，要尽量减少Cookie来减小HTTP请求大小。对于静态资源，尽量使用不同的域名来存放，因为Cookie默认是不能跨域的，这样就做到了不同域名下静态资源请求的Cookie隔离。</p><h3>推荐使用异步JavaScript资源</h3><p>异步的JavaScript资源不会阻塞文档解析，所以允许在浏览器中优先渲染界面，延后加载脚本执行。例如JavaScript的引用可以如下设置，也可以使用模块化加载机制来实现。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span> <span class="attr">async</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3>消除阻塞渲染的CSS及Javacript</h3><p>对于页面中加载时间过长的SCC或JavaScript文件，需要进行合理的拆分或延后加载，保证关键路径的资源能快速的加载完成。</p><h3>避免使用CSS import引用加载Css</h3><p>CSS中的＠import可以从另一个样式文件中引入样式，但应该避免这种用法，因为这样会增加CSS资源加载的关键路径长度，带有＠import的CSS样式需要在CSS文件串行解析到@import时才会加载另外的CSS文件，大大延后CSS渲染完成的时间。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 不推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">@import "path/main.css";</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//cdn1.domain.com/path/main.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3>渲染优化</h3><h4>把CSS资源引用放到HTML文件顶部</h4><p>一般推荐将所有CSS资源尽早指定在HTML文档的<head>中，这样浏览器可以优先下载CSS并尽早完成页面的渲染</head></p><h4>JavaScript资源引用放到HTML文件底部</h4><h4>减少DOM元素的数量和深度</h4><h4>尽量避免使用 table iframe 等慢元素</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Web前端性能优化&lt;/h1&gt;
&lt;h2&gt;桌面端优化&lt;/h2&gt;
&lt;h3&gt;减少HTTP资源请求数&lt;/h3&gt;
&lt;p&gt;透过构建工具合并雪碧图、CSS、JS文件。来减少资源的请求，避免重复的资源。&lt;/p&gt;
&lt;h3&gt;减少HTTP请求大小&lt;/h3&gt;
&lt;p&gt;除了减少资源次数，也要尽量减小每
      
    
    </summary>
    
    
      <category term="性能优化" scheme="https://dayuan.tech/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>ES6设计模式 设计原则</title>
    <link href="https://dayuan.tech/article/ES6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>https://dayuan.tech/article/ES6设计模式-设计原则/</id>
    <published>2018-04-08T13:57:04.000Z</published>
    <updated>2018-08-22T06:44:36.157Z</updated>
    
    <content type="html"><![CDATA[<h1>ES6的设计模式</h1><p>最近看了《javascript高级程序设计》表示很有收获，但是其整篇文章都是用ES5写的，所以我打算对其整理下，并用ES6进行重写。</p><h2>设计模式6大原则</h2><p>先了解设计原则</p><h3>单一职责原则</h3><p>应该有且只有一个原因引起类的变化，包括方法和接口</p><h3>里氏替换原则</h3><p>只要父类出现的地方子类就一定可以出现，而且替换为子类也不会出现异常。但是子类出现的地方，不一定能使用父类。</p><h3>依赖倒置原则</h3><ul><li><p>高层模块不应该依赖底层模块，两者都应该依赖其抽象</p></li><li><p>抽象不应该依赖细节</p></li><li><p>细节应该依赖抽象</p></li></ul><h3>接口隔离原则</h3><p>客户端不应该依赖他不需要的接口</p><h3>最少知识原则</h3><p>一个对象应该对其他对象有最少的了解</p><h3>开闭原则</h3><p>对拓展开放，对修改关闭，其他五个原则的基石</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;ES6的设计模式&lt;/h1&gt;
&lt;p&gt;最近看了《javascript高级程序设计》表示很有收获，但是其整篇文章都是用ES5写的，所以我打算对其整理下，并用ES6进行重写。&lt;/p&gt;
&lt;h2&gt;设计模式6大原则&lt;/h2&gt;
&lt;p&gt;先了解设计原则&lt;/p&gt;
&lt;h3&gt;单一职责原则&lt;/h3&gt;
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://dayuan.tech/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>React生命周期详解</title>
    <link href="https://dayuan.tech/article/React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/"/>
    <id>https://dayuan.tech/article/React生命周期详解/</id>
    <published>2018-04-06T09:06:19.000Z</published>
    <updated>2018-08-22T06:50:53.486Z</updated>
    
    <content type="html"><![CDATA[<h1>React生命周期图解</h1><p><img src="/article/React生命周期详解/React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/react_life_cycle.png" alt="React生命周期图解"></p><h1>详细说明</h1><p>生命周期包含4种情况：组件初始化装载时候，组件属性改变时候，组件状态改变时候，组件被销毁时候</p><p>生命周期共提供了10个不同的API。</p><h2>defaultProps</h2><p>ES6使用defaultProps()方法，ES5中getDefaultProps()方法。只调用一次，返回对象用于设置默认的props，但是对于引用值会在各个实例中共享。</p><h2>constructor(props)</h2><p>构造函数，实例创建的时候调用，主要为了初始化state或绑定this，ES5中用getInitialState()</p><h2>componentWillMount()</h2><p>第一次渲染阶段在调用render方法前会调用，此时仍然可以修改组件的state</p><h2>render()</h2><p>必选方法，创建虚拟DOM，该方法具有特殊规则：</p><ul><li>只能通过this.props和this.state访问数据</li><li>可以返回null、false或任何React组件</li><li>只能出现一个顶级组件（不能返回数组）</li><li>不能改变组件的状态state</li><li>不能修改DOM的输出</li></ul><h2>componentDidMount</h2><p>首次装载渲染完成，真实的DOM被渲染出来后调用，可以做一些依赖DOM的操作，比如利用refs获取DOM。子组件比父组件优先渲染，所以可以获取子组件对应的DOM。</p><p>注意：在服务端中，该方法不会被调用！</p><h2>componentWillReciveProps(nextProps)</h2><p>组件接受到新的props时候调用，此时可以根据nextProps来修改state。</p><p>注意：这个时候虽然说是获取新的属性，但是并不能保证属性一定发生了改变。</p><h2>shouldComponentUpdate(nextProps, nextState)</h2><p>接受到新的属性或者新的状态的时候在render前会被调用。除了调用forceUpdate和初始化渲染以外。</p><p>该方法让我们有机会决定是否重新渲染组件，返回false，那么不会重新渲染组件，借此可以优化性能，除非特殊情况比如在组件很多性能瓶颈，大多数情况不推荐使用。</p><h2>componentWillUpdate(nextProps, nextState)</h2><p>当组件确定要更新，render之前被调用。</p><p>这个时候可以确定一定会更新组件，可以执行更新前的操作。此时不能更新修改state和props！</p><h2>componentDitUpdate()</h2><p>完成渲染新的props或者state后调用，此时可以访问到新的DOM元素。</p><h2>componentWillUnmount()</h2><p>组件被卸载之前调用，可以用于做一些清理工作，在componentDidMount方法中添加的所有任务都需要在该方法中撤销，比如创建的定时器或添加的事件监听器。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;React生命周期图解&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/article/React生命周期详解/React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/react_life_cycle.png&quot; alt
      
    
    </summary>
    
    
      <category term="React" scheme="https://dayuan.tech/tags/React/"/>
    
  </entry>
  
</feed>
